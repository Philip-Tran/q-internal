// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  email         String    @unique
  name          String?
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  role       String?
  banned     Boolean?
  banReason  String?
  banExpires DateTime?

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

enum WeekDay {
  SUN
  MON
  TUE
  WED
  THU
  FRI
  SAT
}

model Setting {
  id        Int     @id @default(autoincrement())
  updateDay WeekDay @default(SUN)
}

model Objective {
  id                       String           @id @default(uuid())
  name                     String
  createdAt                DateTime         @default(now())
  updatedAt                DateTime         @updatedAt
  month                    Int
  year                     Int
  progressOnTotalKeyResult Int?
  keyResults               KeyResult[]
  reflexes                 Reflex[]
  progressUpdates          ProgressUpdate[]

  @@map("objective")
}

model KeyResult {
  id           String   @id @default(uuid())
  name         String
  resultNumber Int
  resultUpdate Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  objectiveId String
  objective   Objective @relation(fields: [objectiveId], references: [id])

  keyResultProgressUpdate KeyResultProgressUpdate[]

  @@map("key_result")
}

model Reflex {
  id                String   @id @default(uuid())
  confidentRate     Int
  whatCanBeImproved String
  whatToDoToImprove String
  noteToMyself      String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  objectiveId String
  objective   Objective @relation(fields: [objectiveId], references: [id])

  @@map("reflex")
}

model ProgressUpdate {
  id            String   @id @default(uuid())
  confidentRate Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  objectiveId String
  objective   Objective @relation(fields: [objectiveId], references: [id])

  @@map("progress_update")
}

model KeyResultProgressUpdate {
  id String @id @default(uuid())

  updatedKeyResultNumber Int
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  keyResultId String
  keyResult   KeyResult @relation(fields: [keyResultId], references: [id])

  @@map("key_result_progress_update")
}

enum WorkStatus {
  TODO
  IN_PROGRESS
  DONE
  PAUSE
}

model Work {
  id          String     @id @default(uuid())
  workName    String
  status      WorkStatus
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  worklogs    WorkLog[]
  noteContent String?

  @@map("work")
}

enum LogType {
  FINISH
  UPDATE
  PAUSE
}

model WorkLog {
  id         String   @id @default(uuid())
  logContent String
  createdAt  DateTime @default(now())
  logType    LogType

  workId String
  work   Work   @relation(fields: [workId], references: [id])

  @@map("work_log")
}
