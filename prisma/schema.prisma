// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  email         String    @unique
  name          String?
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  role       String?
  banned     Boolean?
  banReason  String?
  banExpires DateTime?

  setting Setting?

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

enum WeekDay {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

enum Theme {
  light
  dark
}

model Setting {
  id       Int    @id @default(autoincrement())
  timezone String @default("Asia/Bangkok") // e.g. "Asia/Tokyo", "America/New_York"

  // in minute
  breakRemindInterval Int     @default(60)
  remindBreakTime     Boolean @default(true)
  enableSoundRemind   Boolean @default(false)
  updateDay           WeekDay @default(FRIDAY)

  // ui
  theme Theme @default(dark)

  userId String @unique // only one setting per user
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("setting")
}

enum UpdateStatus {
  TRUE
  FALSE
  IGNORED
  IDLE
}

model Objective {
  id                       String       @id @default(cuid())
  name                     String
  month                    Int
  year                     Int
  progressOnTotalKeyResult Int?
  keyResults               KeyResult[]
  reflexes                 Reflex[]
  isUpdated                UpdateStatus @default(IDLE)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("objective")
}

model KeyResult {
  id           String   @id @default(uuid())
  name         String
  resultNumber Int
  resultUpdate Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  objectiveId String
  objective   Objective @relation(fields: [objectiveId], references: [id])

  @@map("key_result")
}

model Reflex {
  id                      String @id @default(cuid())
  confidentRate           Int
  statusNotes             String
  howToOvercomeChallenges String
  noteToMyself            String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  objectiveId String
  objective   Objective @relation(fields: [objectiveId], references: [id])

  @@map("reflex")
}

enum WorkStatus {
  TODO
  IN_PROGRESS
  DONE
  PAUSE
}

model Work {
  id          String     @id @default(nanoid())
  workName    String
  status      WorkStatus
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  worklogs    WorkLog[]
  noteContent String?

  Project   Project? @relation(fields: [projectId], references: [id])
  projectId String?

  Timestamps Timestamps? @relation(name: "TimestampsToWork")

  @@map("work")
}

enum LogType {
  FINISH
  UPDATE
  PAUSE
}

model WorkLog {
  id         String   @id @default(uuid())
  logContent String
  createdAt  DateTime @default(now())
  logType    LogType

  workId String
  work   Work   @relation(fields: [workId], references: [id], onDelete: Cascade)

  @@map("work_log")
}

enum ProjectStatus {
  IN_PROGRESS
  DONE
  REVIEWING
  BACKLOG
}

model Project {
  id          String        @id @default(nanoid(7))
  name        String
  description String?
  note        String?
  status      ProjectStatus @default(IN_PROGRESS)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  works Work[] // One-to-many relationship

  @@map("project")
}

model WorkSchedule {
  id        Int   @id @default(autoincrement())
  // the number of hours work each day
  sunday    Float @default(0)
  monday    Float @default(0)
  tuesday   Float @default(0)
  wednesday Float @default(0)
  thursday  Float @default(0)
  friday    Float @default(0)
  saturday  Float @default(0)

  validFrom DateTime @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("work_schedule")
}

model WorkScheduleTimeBlock {
  id        Int                    @id @default(autoincrement())
  timeSlots WorkScheduleTimeSlot[] // 1-to-many relationship

  @@map("work_schedule_time_block")
}

model WorkScheduleTimeSlot {
  id         Int                   @id @default(autoincrement())
  day        WeekDay 
  index      Int // for ordering or grouping
  startedAt  String // 8:AM 
  endedAt    String // 12:PM
  scheduleId Int
  schedule   WorkScheduleTimeBlock @relation(fields: [scheduleId], references: [id], onDelete: Cascade)

  @@map("work_schedule_time_slot")
}

enum TimestampStatus {
  IDLE
  RUNNING
  STOPPED
  PAUSED
  IS_TRACKING
  INITIALIZED
}

model Timestamps {
  id           Int             @id @default(autoincrement())
  type         String?
  startedAt    DateTime        @default(now())
  endedAt      DateTime?
  lastPingedAt DateTime?
  status       TimestampStatus @default(IDLE)

  totalDuration Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  timestampsRecord Json?

  work   Work   @relation(name: "TimestampsToWork", fields: [workId], references: [id], onDelete: Cascade)
  workId String @unique

  @@map("time_stamps")
}

model Module {
  id      String  @id @default(uuid())
  name    String
  url     String
  iconUrl String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("module")
}
